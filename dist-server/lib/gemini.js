// src/lib/gemini.ts
var GEMINI_API_KEY = "AIzaSyBC1AV0xMU3ky_5Lz_6uelqf6-IX93vbB0";
var API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";
async function generateTemplateContent(templateType, description) {
  try {
    const availableVariables = [
      "customerName",
      "orderId",
      "amount",
      "retryUrl",
      "carrier",
      "trackingLink",
      "estimatedDelivery",
      "feedbackLink",
      "reviewLink",
      "refundAmount",
      "daysSinceDelivery",
      "reorderLink",
      "cartUrl"
    ];
    const prompt = `
      Create a short WhatsApp message template for a business CRM system. The template type is: ${templateType}.
      
      Template purpose: ${description}
      
      IMPORTANT FORMATTING INSTRUCTIONS:
      1. Start with 1-2 relevant emojis followed by a *bold title*
      2. Use line breaks (
) between paragraphs
      3. Keep the message under 500 characters total
      4. Format key information with *asterisks* to make it bold in WhatsApp
      5. Use a friendly, professional tone
      6. Include a clear call-to-action if relevant
      7. DO NOT include any explanations or comments about the template
      8. ONLY return the template text itself
      
      AVAILABLE VARIABLES (use exactly as shown):
      ${availableVariables.map((v) => `- {{${v}}}`).join("\n")}
      
      For the template "${templateType}", be sure to include the most relevant variables from the list above.
      
      EXAMPLE FORMAT (for a different template type):
      \u{1F389} *Order Confirmed* \u{1F389}

Hi {{customerName}},

Your order #{{orderId}} has been confirmed!

Thank you for shopping with us.

We'll update you when your order ships.
    `;
    const response = await fetch(`${API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        contents: [{
          parts: [{ text: prompt }]
        }]
      })
    });
    if (!response.ok) {
      const errorData = await response.json();
      console.error("Gemini API error:", errorData);
      throw new Error(`Gemini API error: ${errorData.error?.message || response.statusText || "Unknown error"}`);
    }
    const data = await response.json();
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!generatedText) {
      throw new Error("No content generated by Gemini API");
    }
    const cleanedText = generatedText.replace(/```[\s\S]*?```/g, "");
    console.log("Raw Gemini response:", generatedText);
    return cleanedText.trim();
  } catch (error) {
    console.error("Error generating template with Gemini:", error);
    throw new Error(`Failed to generate template: ${error.message}`);
  }
}
async function generateTemplateDescription(templateType) {
  try {
    const prompt = `Write a brief one-sentence description (maximum 100 characters) for a WhatsApp message template of type "${templateType}". The description should explain when this template would be sent to customers.`;
    const response = await fetch(`${API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        contents: [{
          parts: [{ text: prompt }]
        }]
      })
    });
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`Gemini API error: ${errorData.error?.message || response.statusText || "Unknown error"}`);
    }
    const data = await response.json();
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!generatedText) {
      throw new Error("No content generated by Gemini API");
    }
    console.log("Raw Gemini description response:", generatedText);
    return generatedText.trim();
  } catch (error) {
    console.error("Error generating template description with Gemini:", error);
    return `Template for ${templateType.replace(/_/g, " ").toLowerCase()}`;
  }
}
export {
  generateTemplateContent,
  generateTemplateDescription
};
//# sourceMappingURL=gemini.js.map
