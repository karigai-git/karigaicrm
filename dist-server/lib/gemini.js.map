{
  "version": 3,
  "sources": ["../../src/lib/gemini.ts"],
  "sourcesContent": ["/**\r\n * Utility for interacting with Google's Gemini API using direct API calls\r\n */\r\n\r\n// The API key is loaded from environment variables\r\nconst GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;\r\nconst API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';\r\n\r\n/**\r\n * Generate WhatsApp template content using Gemini AI\r\n * @param templateType The type of template to generate (e.g., order_confirmation)\r\n * @param description Brief description of the template's purpose\r\n * @returns Generated template content\r\n */\r\nexport async function generateTemplateContent(\r\n  templateType: string,\r\n  description: string\r\n): Promise<string> {\r\n  try {\r\n    // List of available variables for templates\r\n    const availableVariables = [\r\n      'customerName', 'orderId', 'amount', 'retryUrl', 'carrier',\r\n      'trackingLink', 'estimatedDelivery', 'feedbackLink', 'reviewLink',\r\n      'refundAmount', 'daysSinceDelivery', 'reorderLink', 'cartUrl'\r\n    ];\r\n\r\n    // Construct the prompt for Gemini\r\n    const prompt = `\r\n      Create a short WhatsApp message template for a business CRM system. The template type is: ${templateType}.\r\n      \r\n      Template purpose: ${description}\r\n      \r\n      IMPORTANT FORMATTING INSTRUCTIONS:\r\n      1. Start with 1-2 relevant emojis followed by a *bold title*\r\n      2. Use line breaks (\\n) between paragraphs\r\n      3. Keep the message under 500 characters total\r\n      4. Format key information with *asterisks* to make it bold in WhatsApp\r\n      5. Use a friendly, professional tone\r\n      6. Include a clear call-to-action if relevant\r\n      7. DO NOT include any explanations or comments about the template\r\n      8. ONLY return the template text itself\r\n      \r\n      AVAILABLE VARIABLES (use exactly as shown):\r\n      ${availableVariables.map(v => `- {{${v}}}`).join('\\n')}\r\n      \r\n      For the template \"${templateType}\", be sure to include the most relevant variables from the list above.\r\n      \r\n      EXAMPLE FORMAT (for a different template type):\r\n      \uD83C\uDF89 *Order Confirmed* \uD83C\uDF89\\n\\nHi {{customerName}},\\n\\nYour order #{{orderId}} has been confirmed!\\n\\nThank you for shopping with us.\\n\\nWe'll update you when your order ships.\r\n    `;\r\n\r\n    // Call the Gemini API directly using the curl example format\r\n    const response = await fetch(`${API_URL}?key=${GEMINI_API_KEY}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        contents: [{\r\n          parts: [{ text: prompt }]\r\n        }]\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      console.error('Gemini API error:', errorData);\r\n      throw new Error(`Gemini API error: ${errorData.error?.message || response.statusText || 'Unknown error'}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    // Extract the generated text from the response\r\n    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;\r\n    \r\n    if (!generatedText) {\r\n      throw new Error('No content generated by Gemini API');\r\n    }\r\n\r\n    // Clean up the response to extract just the template content\r\n    // Remove any markdown code blocks if present\r\n    const cleanedText = generatedText.replace(/```[\\s\\S]*?```/g, '');\r\n    \r\n    // For debugging\r\n    console.log('Raw Gemini response:', generatedText);\r\n    \r\n    // Return the full text if we can't extract a specific template pattern\r\n    return cleanedText.trim();\r\n  } catch (error) {\r\n    console.error('Error generating template with Gemini:', error);\r\n    throw new Error(`Failed to generate template: ${error.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Generate a description for a WhatsApp template\r\n * @param templateType The type of template\r\n * @returns Generated description\r\n */\r\nexport async function generateTemplateDescription(templateType: string): Promise<string> {\r\n  try {\r\n    const prompt = `Write a brief one-sentence description (maximum 100 characters) for a WhatsApp message template of type \"${templateType}\". The description should explain when this template would be sent to customers.`;\r\n\r\n    // Call the Gemini API\r\n    const response = await fetch(`${API_URL}?key=${GEMINI_API_KEY}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        contents: [{\r\n          parts: [{ text: prompt }]\r\n        }]\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(`Gemini API error: ${errorData.error?.message || response.statusText || 'Unknown error'}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;\r\n    \r\n    if (!generatedText) {\r\n      throw new Error('No content generated by Gemini API');\r\n    }\r\n\r\n    // For debugging\r\n    console.log('Raw Gemini description response:', generatedText);\r\n    \r\n    // Clean up the response\r\n    return generatedText.trim();\r\n  } catch (error) {\r\n    console.error('Error generating template description with Gemini:', error);\r\n    return `Template for ${templateType.replace(/_/g, ' ').toLowerCase()}`;\r\n  }\r\n}\r\n"],
  "mappings": ";AAKA,IAAM,iBAAiB;AACvB,IAAM,UAAU;AAQhB,eAAsB,wBACpB,cACA,aACiB;AACjB,MAAI;AAEF,UAAM,qBAAqB;AAAA,MACzB;AAAA,MAAgB;AAAA,MAAW;AAAA,MAAU;AAAA,MAAY;AAAA,MACjD;AAAA,MAAgB;AAAA,MAAqB;AAAA,MAAgB;AAAA,MACrD;AAAA,MAAgB;AAAA,MAAqB;AAAA,MAAe;AAAA,IACtD;AAGA,UAAM,SAAS;AAAA,kGAC+E,YAAY;AAAA;AAAA,0BAEpF,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAa7B,mBAAmB,IAAI,OAAK,OAAO,CAAC,IAAI,EAAE,KAAK,IAAI,CAAC;AAAA;AAAA,0BAElC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOlC,UAAM,WAAW,MAAM,MAAM,GAAG,OAAO,QAAQ,cAAc,IAAI;AAAA,MAC/D,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,UAAU,CAAC;AAAA,UACT,OAAO,CAAC,EAAE,MAAM,OAAO,CAAC;AAAA,QAC1B,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,YAAY,MAAM,SAAS,KAAK;AACtC,cAAQ,MAAM,qBAAqB,SAAS;AAC5C,YAAM,IAAI,MAAM,qBAAqB,UAAU,OAAO,WAAW,SAAS,cAAc,eAAe,EAAE;AAAA,IAC3G;AAEA,UAAM,OAAO,MAAM,SAAS,KAAK;AAGjC,UAAM,gBAAgB,KAAK,aAAa,CAAC,GAAG,SAAS,QAAQ,CAAC,GAAG;AAEjE,QAAI,CAAC,eAAe;AAClB,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACtD;AAIA,UAAM,cAAc,cAAc,QAAQ,mBAAmB,EAAE;AAG/D,YAAQ,IAAI,wBAAwB,aAAa;AAGjD,WAAO,YAAY,KAAK;AAAA,EAC1B,SAAS,OAAO;AACd,YAAQ,MAAM,0CAA0C,KAAK;AAC7D,UAAM,IAAI,MAAM,gCAAgC,MAAM,OAAO,EAAE;AAAA,EACjE;AACF;AAOA,eAAsB,4BAA4B,cAAuC;AACvF,MAAI;AACF,UAAM,SAAS,4GAA4G,YAAY;AAGvI,UAAM,WAAW,MAAM,MAAM,GAAG,OAAO,QAAQ,cAAc,IAAI;AAAA,MAC/D,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,UAAU,CAAC;AAAA,UACT,OAAO,CAAC,EAAE,MAAM,OAAO,CAAC;AAAA,QAC1B,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,YAAY,MAAM,SAAS,KAAK;AACtC,YAAM,IAAI,MAAM,qBAAqB,UAAU,OAAO,WAAW,SAAS,cAAc,eAAe,EAAE;AAAA,IAC3G;AAEA,UAAM,OAAO,MAAM,SAAS,KAAK;AACjC,UAAM,gBAAgB,KAAK,aAAa,CAAC,GAAG,SAAS,QAAQ,CAAC,GAAG;AAEjE,QAAI,CAAC,eAAe;AAClB,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACtD;AAGA,YAAQ,IAAI,oCAAoC,aAAa;AAG7D,WAAO,cAAc,KAAK;AAAA,EAC5B,SAAS,OAAO;AACd,YAAQ,MAAM,sDAAsD,KAAK;AACzE,WAAO,gBAAgB,aAAa,QAAQ,MAAM,GAAG,EAAE,YAAY,CAAC;AAAA,EACtE;AACF;",
  "names": []
}
